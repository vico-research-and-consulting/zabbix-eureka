#!/usr/bin/env python3

import json
import sys
import requests
import os
import datetime
from requests.exceptions import ConnectTimeout


def usage():
    print(sys.argv[0]+" <connection> (health|discover|get <item>)")
    sys.exit(1)

if len(sys.argv) < 2:
    usage()

TIMEOUT_REQUEST=2

BASE_URL = sys.argv[1]
ACTION = sys.argv[2]

def get_health(uri):
  uri=uri+"/health"
  try:
      r = requests.get(uri, headers={"Accept": "application/json"}, timeout=TIMEOUT_REQUEST)
      result = json.loads(r.text)
      print(result['status'])
  except (requests.exceptions.ConnectTimeout, requests.exceptions.ReadTimeout):
      print("DOWN: unable to get state, connection/request timeout")
  except requests.exceptions.ConnectionError:
      print("DOWN: unable to get state, connection error")

def get_discovery(uri):
  uri=uri+"/eureka/apps"
  try:
  	r = requests.get(uri, headers={"Accept": "application/json"}, timeout=TIMEOUT_REQUEST)
  except (requests.exceptions.ConnectTimeout, requests.exceptions.ReadTimeout):
      print("DOWN: unable to application data, connection/request timeout")
      sys.exit(1)
  except requests.exceptions.ConnectionError:
      print("DOWN: unable to application data, connection error")
      sys.exit(1)

  result = json.loads(r.text)
  data = []
  for app_data in result['applications']['application']:
      if  app_data['name'].find("TESTING") >= 0 or app_data['name'].find("INTEGRATION") >= 0:
        continue
      data.append({ '{#APPLICATION}': app_data['name'] })
  data = { "data":  data }
  print(json.dumps(data, indent=2, sort_keys=True))

def get_status(uri):
  CACHE_FILE = '/tmp/eureka_cache_%s_%s' % (uri.replace("/","\\"), os.getuid())
  cache_valid = False
  try:
    statinfo = os.stat(CACHE_FILE)
  except FileNotFoundError:
    pass
  else:
    if datetime.datetime.now().timestamp() - statinfo.st_mtime < 60:
        cache_valid = True
        with open(CACHE_FILE, 'r') as fh:
            result = json.loads(fh.read())

  uri=uri+"/eureka/apps"
  try:
      r = requests.get(uri, headers={"Accept": "application/json"}, timeout=TIMEOUT_REQUEST)
      result = json.loads(r.text)
  except (requests.exceptions.ConnectTimeout, requests.exceptions.ReadTimeout):
      print("DOWN: unable to get state, connection/request timeout")
      sys.exit(1)
  except requests.exceptions.ConnectionError:
      print("DOWN: unable to get state, connection error")
      sys.exit(1)


  with open(CACHE_FILE, 'w') as fh:
      fh.write(json.dumps(result))

  data = {}
  for app_data in result['applications']['application']:
       instances = 0
       instances_good = 0
       for instance_data in app_data['instance']:
            instances += 1
            if instance_data['status'] == "UP":
               instances_good += 1
       if instances_good == instances:
           status = "OK: %s/%s" % (instances_good,instances)
       elif instances_good != 0:
           status = "WARN: %s/%s" % (instances_good,instances)
       else:
           status = "ERROR: %s/%s" % (instances_good,instances)
       
       data[app_data["name"]] = { "good": instances_good, "num": instances, "status": status }
  if len(sys.argv) != 4:
      print(json.dumps(data))
  else:
      try:
      	print(data[sys.argv[3]]["status"])
      except KeyError:
      	print("ERROR: UNKNOWN APPLICATION")

#######################################################################################################
### MAIN

if ACTION == "health":
  get_health(BASE_URL)
elif ACTION == "discover":
  get_discovery(BASE_URL)
elif ACTION == "get":
  get_status(BASE_URL)
else:
   usage()

# vim: ai et ts=2 shiftwidth=2 expandtab

